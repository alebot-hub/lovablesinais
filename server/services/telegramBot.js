/**
 * Servi√ßo do Bot do Telegram
 */

import TelegramBot from 'node-telegram-bot-api';
import { Logger } from './logger.js';

const logger = new Logger('TelegramBot');

class TelegramBotService {
  constructor() {
    this.token = process.env.TELEGRAM_TOKEN;
    this.chatId = process.env.TELEGRAM_CHAT_ID;
    this.isEnabled = !!(this.token && this.chatId);
    this.activeMonitors = new Map();
    
    if (this.isEnabled) {
      this.bot = new TelegramBot(this.token, { polling: false });
      console.log('‚úÖ Telegram Bot inicializado');
    } else {
      console.log('‚ö†Ô∏è Telegram Bot em modo simulado (vari√°veis n√£o configuradas)');
    }
  }

  /**
   * Envia sinal de trading formatado
   */
  async sendTradingSignal(signalData) {
    try {
      if (!this.isEnabled) {
        console.log('üì± [SIMULADO] Sinal enviado:', signalData.symbol);
        return true;
      }

      const message = this.formatTradingSignal(signalData);
      
      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });

      console.log(`‚úÖ Sinal enviado via Telegram: ${signalData.symbol}`);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao enviar sinal:', error.message);
      return false;
    }
  }

  /**
   * Formata sinal de trading para Telegram
   */
  formatTradingSignal(signal) {
    const isLong = signal.trend === 'BULLISH';
    const direction = isLong ? 'COMPRA' : 'VENDA';
    const emoji = isLong ? 'üü¢' : 'üî¥';
    const animal = isLong ? 'üêÇ' : 'üêª';
    
    // Ajusta probabilidade para exibi√ß√£o mais realista (60-85% na maioria dos casos)
    const displayProbability = this.calculateDisplayProbability(signal.probability || signal.totalScore || 0);
    
    // Formata fatores-chave espec√≠ficos e √∫nicos
    const factors = this.generateSpecificFactors(signal, isLong);
    const factorsText = factors.map(f => `   ‚Ä¢ ${f}`).join('\n');

    // Calcula alvos baseados na dire√ß√£o
    const targets = signal.targets.map((target, index) => {
      const targetNum = index + 1;
      const emoji = targetNum === 6 ? 'üåï' : `${targetNum}Ô∏è‚É£`;
      const label = targetNum === 6 ? 
        (isLong ? 'Alvo 6 - Lua!' : 'Alvo 6 - Queda Infinita!') : 
        `Alvo ${targetNum}`;
      return `${emoji} *${label}:* ${target.toFixed(2).replace('.', '‚Ä§')}`;
    }).join('\n');

    // Remove linha duplicada do regime - j√° est√° no cabe√ßalho
    
    // Aviso de correla√ß√£o Bitcoin se necess√°rio
    let bitcoinWarning = '';
    if (signal.btcCorrelation && signal.btcCorrelation.alignment === 'AGAINST') {
      const btcTrend = signal.btcCorrelation.btcTrend === 'BULLISH' ? 'ALTA' : 'BAIXA';
      const operationType = isLong ? 'COMPRA' : 'VENDA';
      bitcoinWarning = `\n\n‚ö†Ô∏è *ATEN√á√ÉO:* O Bitcoin est√° em tend√™ncia de *${btcTrend}*. Opera√ß√µes *${operationType}* podem ter risco elevado.`;
    }

    return `üö® *LOBO PREMIUM #${signal.symbol.split('/')[0]} ${emoji} ${direction} ${animal}*

üí∞ *#${signal.symbol.split('/')[0]} Futures*
üìà *Alavancagem sugerida:* 15x
üéØ *Probabilidade:* ${displayProbability.toFixed(1)}%

üí° *Interpreta√ß√£o:* ${this.getInterpretation(signal, isLong)}
üîç *Fatores-chave:*
${factorsText}

‚ö°Ô∏è *Entrada:* ${signal.entry.toFixed(2).replace('.', '‚Ä§')}

üéØ *ALVOS (15x):*
${targets}

${bitcoinWarning}

üëë *Sinais Premium s√£o 100% a favor da tend√™ncia e correla√ß√£o com o Bitcoin*
‚è∞ ${new Date().toLocaleString('pt-BR')}`;
  }

  /**
   * Gera fatores espec√≠ficos e √∫nicos baseados no sinal
   */
  generateSpecificFactors(signal, isLong) {
    const factors = [];
    const indicators = signal.indicators || {};
    const patterns = signal.patterns || {};
    const btcCorrelation = signal.btcCorrelation || {};

    // RSI - espec√≠fico por dire√ß√£o
    if (indicators.rsi !== undefined) {
      if (isLong && indicators.rsi < 30) {
        factors.push('RSI em sobrevenda favor√°vel para compra');
      } else if (!isLong && indicators.rsi > 70) {
        factors.push('RSI em sobrecompra extrema (oportunidade de venda)');
      } else if (indicators.rsi < 40) {
        factors.push('RSI em zona de compra');
      } else if (indicators.rsi > 60) {
        factors.push('RSI em zona de venda');
      }
    }

    // MACD - espec√≠fico por dire√ß√£o
    if (indicators.macd && indicators.macd.histogram !== undefined) {
      if (isLong && indicators.macd.histogram > 0) {
        factors.push('MACD com momentum bullish confirmado');
      } else if (!isLong && indicators.macd.histogram < 0) {
        factors.push('MACD com momentum bearish confirmado');
      } else if (indicators.macd.histogram > 0) {
        factors.push('MACD indicando for√ßa compradora');
      } else {
        factors.push('MACD indicando press√£o vendedora');
      }
    }

    // Volume - espec√≠fico por dire√ß√£o
    if (indicators.volume && indicators.volume.volumeRatio > 1.2) {
      if (isLong) {
        factors.push('Volume alto confirmando movimento de compra');
      } else {
        factors.push('Volume alto confirmando press√£o vendedora');
      }
    } else if (indicators.volume) {
      factors.push('Volume moderado sustentando o movimento');
    }

    // Padr√µes - espec√≠fico por tipo
    if (patterns.breakout) {
      if (patterns.breakout.type === 'BULLISH_BREAKOUT') {
        factors.push('Rompimento bullish de resist√™ncia confirmado');
      } else if (patterns.breakout.type === 'BEARISH_BREAKOUT') {
        factors.push('Rompimento bearish de suporte confirmado');
      }
    }

    if (patterns.candlestick && patterns.candlestick.length > 0) {
      const pattern = patterns.candlestick[0];
      if (pattern.bias === 'BULLISH') {
        factors.push(`Padr√£o ${pattern.type.toLowerCase()} detectado (bullish)`);
      } else if (pattern.bias === 'BEARISH') {
        factors.push(`Padr√£o ${pattern.type.toLowerCase()} detectado (bearish)`);
      }
    }

    // Diverg√™ncia RSI
    if (indicators.rsiDivergence) {
      factors.push('Diverg√™ncia RSI detectada (sinal de revers√£o)');
    }

    // Correla√ß√£o Bitcoin - espec√≠fico por alinhamento
    if (btcCorrelation.alignment === 'ALIGNED') {
      const btcTrend = btcCorrelation.btcTrend === 'BULLISH' ? 'bullish' : 'bearish';
      factors.push(`Alinhado com tend√™ncia ${btcTrend} do Bitcoin`);
    } else if (btcCorrelation.alignment === 'AGAINST') {
      factors.push('Opera√ß√£o contra tend√™ncia do Bitcoin (risco elevado)');
    }

    // M√©dias m√≥veis
    if (indicators.ma21 && indicators.ma200) {
      if (isLong && indicators.ma21 > indicators.ma200) {
        factors.push('M√©dias m√≥veis em configura√ß√£o bullish');
      } else if (!isLong && indicators.ma21 < indicators.ma200) {
        factors.push('M√©dias m√≥veis em configura√ß√£o bearish');
      }
    }

    // Remove duplicatas e limita a 4 fatores principais
    const uniqueFactors = [...new Set(factors)];
    return uniqueFactors.slice(0, 4);
  }

  /**
   * Gera interpreta√ß√£o espec√≠fica baseada no sinal
   */
  getInterpretation(signal, isLong) {
    const indicators = signal.indicators || {};
    
    // Interpreta√ß√£o baseada no indicador mais forte
    if (indicators.rsi < 25 && isLong) {
      return 'RSI em sobrevenda extrema favor√°vel para compra';
    } else if (indicators.rsi > 75 && !isLong) {
      return 'RSI em sobrecompra extrema favor√°vel para venda';
    } else if (indicators.macd && Math.abs(indicators.macd.histogram) > 0.001) {
      const direction = isLong ? 'compra' : 'venda';
      return `MACD com forte momentum favor√°vel para ${direction}`;
    } else if (signal.btcCorrelation && signal.btcCorrelation.alignment === 'ALIGNED') {
      return 'An√°lise t√©cnica alinhada com tend√™ncia do Bitcoin';
    } else {
      const direction = isLong ? 'compra' : 'venda';
      return `An√°lise t√©cnica favor√°vel para ${direction}`;
    }
  }

  /**
   * Obt√©m emoji do regime de mercado
   */
  getRegimeEmoji(regime) {
    switch (regime) {
      case 'BULL': return 'üêÇ';
      case 'BEAR': return 'üêª';
      case 'VOLATILE': return '‚ö°';
      default: return '‚öñÔ∏è';
    }
  }

  /**
   * Obt√©m descri√ß√£o do regime de mercado
   */
  getRegimeDescription(regime) {
    switch (regime) {
      case 'BULL': return 'Mercado em alta';
      case 'BEAR': return 'Mercado em baixa';
      case 'VOLATILE': return 'Mercado vol√°til';
      default: return 'Mercado em condi√ß√µes normais';
    }
  }

  /**
   * Cria monitor para um s√≠mbolo
   */
  createMonitor(symbol, entry, targets, stopLoss, signalId, trend) {
    try {
      if (this.activeMonitors.has(symbol)) {
        console.log(`‚ö†Ô∏è Monitor j√° existe para ${symbol} - substituindo`);
        this.removeMonitor(symbol, 'REPLACED');
      }

      const monitor = {
        symbol,
        entry,
        targets: [...targets],
        originalTargets: [...targets],
        stopLoss,
        signalId,
        trend,
        startTime: new Date(),
        targetsHit: 0,
        status: 'ACTIVE',
        lastUpdate: new Date()
      };

      this.activeMonitors.set(symbol, monitor);
      console.log(`‚úÖ Monitor criado para ${symbol} (${targets.length} alvos)`);
      
      return monitor;
    } catch (error) {
      console.error(`‚ùå Erro ao criar monitor para ${symbol}:`, error.message);
      return null;
    }
  }

  /**
   * Remove monitor
   */
  removeMonitor(symbol, reason = 'COMPLETED') {
    if (this.activeMonitors.has(symbol)) {
      const monitor = this.activeMonitors.get(symbol);
      this.activeMonitors.delete(symbol);
      console.log(`üóëÔ∏è Monitor removido: ${symbol} (${reason})`);
      return monitor;
    }
    return null;
  }

  /**
   * Verifica se tem monitor ativo
   */
  hasActiveMonitor(symbol) {
    return this.activeMonitors.has(symbol);
  }

  /**
   * Obt√©m s√≠mbolos ativos
   */
  getActiveSymbols() {
    return Array.from(this.activeMonitors.keys());
  }

  /**
   * Inicia monitoramento de pre√ßos
   */
  async startPriceMonitoring(symbol, entry, targets, stopLoss, binanceService, signalData, app, adaptiveScoring) {
    try {
      console.log(`üìä Iniciando monitoramento de ${symbol}...`);
      console.log(`üìä Par√¢metros do monitor:`);
      console.log(`   üí∞ Entrada: $${entry}`);
      console.log(`   üéØ Alvos: ${targets.map(t => '$' + t.toFixed(2)).join(', ')}`);
      console.log(`   üõë Stop: $${stopLoss}`);
      console.log(`   üìà Trend: ${signalData.trend}`);
      
      const monitor = this.activeMonitors.get(symbol);
      if (!monitor) {
        console.error(`‚ùå Monitor n√£o encontrado para ${symbol}`);
        return;
      }

      console.log(`‚úÖ Monitor encontrado para ${symbol}:`, {
        status: monitor.status,
        targetsRemaining: monitor.targets.length,
        targetsHit: monitor.targetsHit
      });

      // Conecta WebSocket para monitoramento em tempo real
      await binanceService.connectWebSocket(symbol, '1m', async (candleData) => {
        try {
          if (!candleData.isClosed) return; // S√≥ processa candles fechados
          
          console.log(`üìä [${symbol}] Candle fechado: $${candleData.close} (${new Date(candleData.timestamp).toLocaleTimeString('pt-BR')})`);
          
          const currentPrice = candleData.close;
          const currentMonitor = this.activeMonitors.get(symbol);
          
          if (!currentMonitor || currentMonitor.status !== 'ACTIVE') {
            console.log(`‚è≠Ô∏è Monitor inativo para ${symbol} - parando WebSocket`);
            binanceService.stopWebSocketForSymbol(symbol, '1m');
            return;
          }

          // Log detalhado do monitoramento
          console.log(`üìä [${symbol}] Monitoramento ativo:`);
          console.log(`   üí∞ Pre√ßo atual: $${currentPrice}`);
          console.log(`   üéØ Pr√≥ximo alvo: $${currentMonitor.targets[0] || 'N/A'}`);
          console.log(`   üõë Stop loss: $${currentMonitor.stopLoss}`);
          console.log(`   üìà Trend: ${currentMonitor.trend}`);
          console.log(`   üéØ Alvos restantes: ${currentMonitor.targets.length}/6`);

          // Verifica stop loss
          const hitStopLoss = currentMonitor.trend === 'BULLISH' ? 
            currentPrice <= currentMonitor.stopLoss :
            currentPrice >= currentMonitor.stopLoss;

          if (hitStopLoss) {
            console.log(`üõë [${symbol}] STOP LOSS ATINGIDO! Pre√ßo: $${currentPrice}, Stop: $${currentMonitor.stopLoss}`);
            await this.handleStopLoss(symbol, currentPrice, currentMonitor, app);
            return;
          }

          // Verifica alvos
          await this.checkTargets(symbol, currentPrice, currentMonitor, app);

        } catch (error) {
          console.error(`‚ùå Erro no monitoramento ${symbol}:`, error.message);
        }
      });

      console.log(`‚úÖ WebSocket configurado para ${symbol} - monitoramento ativo`);

    } catch (error) {
      console.error(`‚ùå Erro ao iniciar monitoramento ${symbol}:`, error.message);
      this.removeMonitor(symbol, 'ERROR');
    }
  }

  /**
   * Verifica se alvos foram atingidos
   */
  async checkTargets(symbol, currentPrice, monitor, app) {
    try {
      const isLong = monitor.trend === 'BULLISH';
      
      console.log(`üéØ [${symbol}] Verificando alvos:`);
      console.log(`   üí∞ Pre√ßo atual: $${currentPrice}`);
      console.log(`   üéØ Pr√≥ximo alvo: $${monitor.targets[0] || 'N/A'}`);
      console.log(`   üìä Dire√ß√£o: ${isLong ? 'LONG' : 'SHORT'}`);
      
      // Verifica se o stop m√≥vel foi acionado (pre√ßo voltou ao stop ap√≥s alvos)
      if (monitor.targetsHit > 0) {
        const stopHit = isLong ? 
          currentPrice <= monitor.stopLoss :
          currentPrice >= monitor.stopLoss;
          
        if (stopHit) {
          console.log(`üõ°Ô∏è [${symbol}] STOP M√ìVEL ACIONADO! Pre√ßo: $${currentPrice}, Stop: $${monitor.stopLoss}`);
          await this.handleStopMobile(symbol, currentPrice, monitor, app);
          return;
        }
      }
      
      // Verifica se atingiu o pr√≥ximo alvo
      const targetHit = isLong ? 
        currentPrice >= monitor.targets[0] :
        currentPrice <= monitor.targets[0];

      if (monitor.targets.length > 0) {
        const distance = isLong ? 
          ((monitor.targets[0] - currentPrice) / currentPrice * 100) :
          ((currentPrice - monitor.targets[0]) / currentPrice * 100);
        console.log(`   üìè Dist√¢ncia para alvo: ${distance > 0 ? '+' : ''}${distance.toFixed(3)}%`);
      }

      if (targetHit && monitor.targets.length > 0) {
        const targetNumber = monitor.originalTargets.length - monitor.targets.length + 1;
        const targetPrice = monitor.targets[0];
        
        console.log(`üéâ [${symbol}] ALVO ${targetNumber} ATINGIDO! $${targetPrice}`);
        
        // Remove alvo atingido
        monitor.targets.shift();
        monitor.targetsHit++;
        monitor.lastUpdate = new Date();

        // Calcula lucro
        const pnlPercent = isLong ? 
          ((targetPrice - monitor.entry) / monitor.entry) * 100 :
          ((monitor.entry - targetPrice) / monitor.entry) * 100;

        console.log(`üí∞ [${symbol}] Lucro: ${pnlPercent.toFixed(2)}% (${(pnlPercent * 15).toFixed(1)}% com 15x)`);

        // Envia notifica√ß√£o
        await this.sendTargetHitNotification(symbol, targetNumber, targetPrice, pnlPercent);

        // Registra no performance tracker
        if (app.performanceTracker) {
          app.performanceTracker.recordTrade(symbol, pnlPercent, true);
        }

        // Se atingiu todos os alvos
        if (monitor.targets.length === 0) {
          console.log(`üåï [${symbol}] TODOS OS ALVOS ATINGIDOS!`);
          await this.handleAllTargetsHit(symbol, monitor, app);
        } else {
          // Implementa stop m√≥vel baseado no alvo atingido
          await this.handleStopMovement(symbol, targetNumber, monitor);
        }
      } else {
        console.log(`‚è≥ [${symbol}] Aguardando movimento para alvo...`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao verificar alvos ${symbol}:`, error.message);
    }
  }

  /**
   * Trata movimento do stop loss baseado no alvo atingido
   */
  async handleStopMovement(symbol, targetNumber, monitor) {
    try {
      let newStopPrice = null;
      let stopDescription = '';
      
      switch (targetNumber) {
        case 2:
          // Alvo 2: Move stop para entrada
          newStopPrice = monitor.entry;
          stopDescription = 'ponto de entrada';
          break;
        case 3:
          // Alvo 3: Move stop para alvo 1
          newStopPrice = monitor.originalTargets[0];
          stopDescription = 'alvo 1';
          break;
        case 4:
          // Alvo 4: Move stop para alvo 2
          newStopPrice = monitor.originalTargets[1];
          stopDescription = 'alvo 2';
          break;
        case 5:
          // Alvo 5: Move stop para alvo 3
          newStopPrice = monitor.originalTargets[2];
          stopDescription = 'alvo 3';
          break;
        default:
          // Alvo 1 e 6 n√£o movem stop
          return;
      }
      
      if (newStopPrice) {
        console.log(`üõ°Ô∏è [${symbol}] Movendo stop para ${stopDescription}: $${newStopPrice}`);
        monitor.stopLoss = newStopPrice;
        await this.sendStopMovedNotification(symbol, newStopPrice, stopDescription);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao mover stop ${symbol}:`, error.message);
    }
  }

  /**
   * Envia notifica√ß√£o de stop m√≥vel (atualizada)
   */
  async sendStopMovedNotification(symbol, newStopPrice, stopDescription) {
    try {
      const monitor = this.activeMonitors.get(symbol);
      if (!monitor) {
        console.error(`‚ùå Monitor n√£o encontrado para ${symbol}`);
        return;
  async handleStopMobile(symbol, currentPrice, monitor, app) {
      
      const isLong = monitor.trend === 'BULLISH';
      const direction = isLong ? 'COMPRA' : 'VENDA';
      const duration = this.calculateDuration(monitor.startTime);
      
      // Calcula lucro parcial realizado at√© agora
      const totalRealizedPnL = this.calculateTotalRealizedPnL(monitor, monitor.targetsHit);
      const leveragedTotalPnL = totalRealizedPnL * 15;
      const realizationBreakdown = this.getRealizationBreakdown(monitor.targetsHit);
      
      const message = `üõ°Ô∏è *STOP M√ìVEL ATIVADO #${symbol.split('/')[0]} ${direction}*

‚úÖ *Stop loss movido para ${stopDescription}*
üí∞ *Lucro parcial realizado:* +${leveragedTotalPnL.toFixed(1)}% (${realizationBreakdown})
üìà *Alvos atingidos:* ${monitor.targetsHit}/6
üìä *Entrada:* ${monitor.entry.toFixed(2).replace('.', '‚Ä§')}
üõ°Ô∏è *Novo stop:* ${newStopPrice.toFixed(2).replace('.', '‚Ä§')}
‚è±Ô∏è *Dura√ß√£o:* ${duration}

üí° *PROTE√á√ÉO ATIVADA:*
‚Ä¢ Stop m√≥vel protegendo lucros parciais
‚Ä¢ Opera√ß√£o sem risco de perda
‚Ä¢ Gest√£o de risco funcionando perfeitamente
‚Ä¢ Continue seguindo a estrat√©gia!

üëë *Gest√£o de risco ativa*`;

      if (this.isEnabled) {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`üõ°Ô∏è Stop m√≥vel enviado: ${symbol} ‚Üí ${stopDescription}`);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar stop m√≥vel:`, error.message);
    }
  }

  /**
   * Trata stop loss atingido
   */
  async handleStopLoss(symbol, currentPrice, monitor, app) {
    try {
      const isLong = monitor.trend === 'BULLISH';
      const pnlPercent = isLong ?
        ((currentPrice - monitor.entry) / monitor.entry) * 100 :
        ((monitor.entry - currentPrice) / monitor.entry) * 100;

      // Registra resultado
      if (app.performanceTracker) {
        app.performanceTracker.recordTrade(symbol, pnlPercent, false);
        const realizedPnL = this.calculateTotalRealizedPnL(monitor, monitor.targetsHit);
        app.performanceTracker.updateSignalResult(symbol, monitor.targetsHit, pnlPercent, 'STOP_LOSS', realizedPnL);
      }

      // Registra no sistema adaptativo
      if (app.adaptiveScoring) {
        app.adaptiveScoring.recordTradeResult(symbol, monitor.indicators || {}, false, pnlPercent);
      }

      // Envia notifica√ß√£o
      await this.sendStopLossNotification(symbol, currentPrice, monitor, pnlPercent);

      // Remove monitor e para WebSocket
      this.removeMonitor(symbol, 'STOP_LOSS');
      app.binanceService.stopWebSocketForSymbol(symbol, '1m');

    } catch (error) {
      console.error(`‚ùå Erro ao tratar stop loss ${symbol}:`, error.message);
    }
  }

  /**
   * Trata todos os alvos atingidos
   */
  async handleAllTargetsHit(symbol, monitor, app) {
    try {
      const finalTarget = monitor.originalTargets[monitor.originalTargets.length - 1];
      const isLong = monitor.trend === 'BULLISH';
      const totalPnlPercent = isLong ?
        ((finalTarget - monitor.entry) / monitor.entry) * 100 :
        ((monitor.entry - finalTarget) / monitor.entry) * 100;

      // Registra resultado final
      if (app.performanceTracker) {
        app.performanceTracker.updateSignalResult(symbol, 6, totalPnlPercent, 'ALL_TARGETS', totalPnlPercent);
      }

      // Registra no sistema adaptativo
      if (app.adaptiveScoring) {
        app.adaptiveScoring.recordTradeResult(symbol, monitor.indicators || {}, true, totalPnlPercent);
      }

      // Envia notifica√ß√£o de lua
      await this.sendAllTargetsHitNotification(symbol, monitor, totalPnlPercent);

      // Remove monitor e para WebSocket
      this.removeMonitor(symbol, 'ALL_TARGETS');
      app.binanceService.stopWebSocketForSymbol(symbol, '1m');

    } catch (error) {
      console.error(`‚ùå Erro ao tratar todos alvos ${symbol}:`, error.message);
    }
  }

  /**
   * Envia notifica√ß√£o de alvo atingido
   */
  async sendTargetHitNotification(symbol, targetNumber, targetPrice, pnlPercent) {
    try {
      const monitor = this.activeMonitors.get(symbol);
      if (!monitor) {
        console.error(`‚ùå Monitor n√£o encontrado para ${symbol}`);
        return;
      }
      
      const isLong = monitor.trend === 'BULLISH';
      const direction = isLong ? 'COMPRA' : 'VENDA';
      const leveragedPnL = pnlPercent * 15; // Alavancagem 15x
      
      // Calcula lucro total realizado de todos os alvos atingidos
      const totalRealizedPnL = this.calculateTotalRealizedPnL(monitor, targetsHit);
      const leveragedTotalPnL = totalRealizedPnL * 15;
      const message = `‚úÖ *ALVO ${targetNumber} ATINGIDO #${symbol.split('/')[0]} ${direction}*

üîç *Alvo ${targetNumber} atingido no par #${symbol.split('/')[0]}*
üí∞ *Lucro atual:* +${leveragedPnL.toFixed(1)}% (Alv. 15√ó)
‚ö°Ô∏è *Posi√ß√£o parcial realizada*
üìä *Entrada:* ${monitor.entry.toFixed(2).replace('.', '‚Ä§')}
üíµ *Pre√ßo do alvo:* ${targetPrice.toFixed(2).replace('.', '‚Ä§')}
‚è±Ô∏è *Tempo at√© o alvo:* ${timeElapsed}
üõ°Ô∏è *Stop ativado:* ${this.getStopStatus(targetNumber)}

üí∞ *Recomenda√ß√£o:* ${this.getTargetRecommendation(targetNumber)}

üëë *Sinais Premium s√£o 100% a favor da tend√™ncia e correla√ß√£o com o Bitcoin*`;

      if (this.isEnabled) {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`‚úÖ Notifica√ß√£o alvo ${targetNumber} enviada: ${symbol}`);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar notifica√ß√£o alvo:`, error.message);
    }
  }

  /**
   * Envia notifica√ß√£o de stop loss
   */
  async sendStopLossNotification(symbol, currentPrice, monitor, pnlPercent) {
    try {
      const leveragedPnL = pnlPercent * 15;
      const duration = this.calculateDuration(monitor.startTime);
      
      let message;
      
      if (monitor.targetsHit === 0) {
        // Stop loss sem alvos atingidos
        message = `‚ùå *#${symbol.split('/')[0]} - OPERA√á√ÉO FINALIZADA* ‚ùå

üìä *Resultado:* üî¥
‚ö° *Alavancado (15x):* üî¥ ${leveragedPnL.toFixed(1)}%

üìå *Motivo:* STOP LOSS ATIVADO

üìà *Alvos atingidos:* Nenhum
üõë *Stop loss:* ${currentPrice.toFixed(2).replace('.', '‚Ä§')}
üìÖ *Dura√ß√£o:* ${duration}

üí° *GERENCIAMENTO DE RISCO:*
- Stop loss ativado sem alvos atingidos
- Perda limitada conforme estrat√©gia
- Gest√£o de risco protegeu o capital total
- Aguarde pr√≥xima oportunidade
- Mantenha disciplina!

üìä *AN√ÅLISE:*
- Mercado se moveu contra nossa opera√ß√£o
- Stop loss protegeu de perdas maiores
- Pr√≥xima opera√ß√£o pode ser mais favor√°vel

üëë Sinais Lobo Cripto
‚è∞ ${new Date().toLocaleString('pt-BR')}`;
      } else {
        // Stop loss ap√≥s alguns alvos
        message = `‚ùå *#${symbol.split('/')[0]} - OPERA√á√ÉO FINALIZADA* ‚ùå

üìä *Resultado:* üî¥
‚ö° *Alavancado (15x):* üî¥ ${leveragedPnL.toFixed(1)}%

üìå *Motivo:* STOP LOSS ATIVADO AP√ìS ALVO ${monitor.targetsHit}

üìà *Alvos atingidos:* ${monitor.targetsHit}
üõë *Stop loss:* ${currentPrice.toFixed(2).replace('.', '‚Ä§')}
üìÖ *Dura√ß√£o:* ${duration}

üí° *GERENCIAMENTO DE RISCO:*
- Stop loss ativado ap√≥s realiza√ß√£o parcial no Alvo ${monitor.targetsHit}
- ${monitor.targetsHit > 0 ? '50% da posi√ß√£o foi realizada com lucro' : 'Perda limitada conforme estrat√©gia'}
- Perda reduzida na posi√ß√£o restante
- Estrat√©gia de prote√ß√£o funcionou
- Aguarde pr√≥xima oportunidade

üìä *AN√ÅLISE:*
- Mercado reverteu ap√≥s atingir o${monitor.targetsHit > 1 ? 's' : ''} primeiro${monitor.targetsHit > 1 ? 's' : ''} alvo${monitor.targetsHit > 1 ? 's' : ''}
- Realiza√ß√£o parcial garantiu lucro na opera√ß√£o
- Stop m√≥vel protegeu os ganhos parciais

üëë Sinais Lobo Cripto
‚è∞ ${new Date().toLocaleString('pt-BR')}`;
      }

      if (this.isEnabled) {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`‚ùå Stop loss enviado: ${symbol}`);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar stop loss:`, error.message);
    }
  }

  /**
   * Envia notifica√ß√£o de todos alvos atingidos
   */
  async sendAllTargetsHitNotification(symbol, monitor, totalPnlPercent) {
    try {
      const leveragedPnL = totalPnlPercent * 15;
      const duration = this.calculateDuration(monitor.startTime);
      
      const message = `üåï *#${symbol.split('/')[0]} - OPERA√á√ÉO FINALIZADA* üåï

üìä *Resultado:* üü¢ +${totalPnlPercent.toFixed(1)}%
‚ö° *Alavancado (15x):* üü¢ +${leveragedPnL.toFixed(1)}%

üìå *Motivo:* TODOS OS ALVOS ATINGIDOS - LUA!

üìà *Alvos atingidos:* 6/6
üõë *Stop loss:* ${monitor.stopLoss.toFixed(2).replace('.', '‚Ä§')}
üìÖ *Dura√ß√£o:* ${duration}

üëë *Sinais Lobo Cripto*
‚è∞ ${new Date().toLocaleString('pt-BR')}`;

      if (this.isEnabled) {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`üåï Lua enviada: ${symbol}`);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar lua:`, error.message);
    }
  }

  /**
   * Envia notifica√ß√£o de stop m√≥vel
   */
  async sendStopMovedNotification(symbol, newStopPrice) {
    try {
      const message = `üõ°Ô∏è *STOP M√ìVEL ATIVADO #${symbol.split('/')[0]}*

‚úÖ *Stop loss movido para ponto de entrada*
üõ°Ô∏è *Novo stop:* ${newStopPrice.toFixed(2).replace('.', '‚Ä§')}
üí∞ *Opera√ß√£o protegida contra perdas*

üëë *Gest√£o de risco ativa*`;

      if (this.isEnabled) {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`üõ°Ô∏è Stop m√≥vel enviado: ${symbol}`);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar stop m√≥vel:`, error.message);
    }
  }

  /**
   * Calcula dura√ß√£o da opera√ß√£o
   */
  calculateDuration(startTime) {
    const now = new Date();
    const diff = now - startTime;
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (days > 0) {
      return `${days} dias ${hours}h ${minutes}m`;
    } else {
      return `${hours}h ${minutes}m`;
    }
  }

  /**
   * Obt√©m status do stop loss baseado no alvo
   */
  getStopStatus(targetNumber) {
    switch (targetNumber) {
      case 1: return 'mantido na entrada';
      case 2: return 'movido para entrada';
      case 3: return 'movido para alvo 1';
      case 4: return 'movido para alvo 2';
      case 5: return 'movido para alvo 3';
      case 6: return 'opera√ß√£o finalizada';
      default: return 'stop m√≥vel ativo';
    }
  }

  /**
   * Obt√©m recomenda√ß√£o por alvo
   */
  getTargetRecommendation(targetNumber) {
    switch (targetNumber) {
      case 1: return 'Realize 50% de Lucro Parcial da posi√ß√£o';
      case 2: return 'Realize 50% da posi√ß√£o e mova o stop para o ponto de entrada';
      case 3: return 'Mova o stop para o alvo 1';
      case 4: return 'Mova o stop para o alvo 2';
      case 5: return 'Mova o stop para o alvo 3';
      
      // Calcula dura√ß√£o da opera√ß√£o
      const duration = this.calculateDuration(monitor.startTime);
      
      const message = `‚úÖ *STOP DE LUCRO ATIVADO #${symbol.split('/')[0]} ${direction}*

üîç *Pre√ßo retornou ao ponto de prote√ß√£o*
üí∞ *Lucro realizado:* +${leveragedTotalPnL.toFixed(1)}% (${this.getRealizationBreakdown(targetsHit)})
üìà *Alvos atingidos:* ${targetsHit}/6
üìä *Entrada:* ${monitor.entry.toFixed(2).replace('.', '‚Ä§')}
üíµ *Pre√ßo atual:* ${currentPrice.toFixed(2).replace('.', '‚Ä§')}
‚è±Ô∏è *Dura√ß√£o:* ${duration}

üéâ *EXCELENTE RESULTADO!*
‚Ä¢ Opera√ß√£o finalizada sem perdas
‚Ä¢ Stop de lucro protegeu os ganhos
‚Ä¢ Gest√£o de risco funcionou perfeitamente
‚Ä¢ Parab√©ns pela disciplina!

üëë *Sinais Premium s√£o 100% a favor da tend√™ncia e correla√ß√£o com o Bitcoin*`;

      if (this.isEnabled) {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`üõ°Ô∏è Stop de lucro enviado: ${symbol}`);
      
      // Registra resultado positivo
      if (app.performanceTracker) {
        const realizedPnL = this.calculateTotalRealizedPnL(monitor, targetsHit);
        app.performanceTracker.updateSignalResult(symbol, targetsHit, realizedPnL, 'STOP_MOBILE', realizedPnL);
      }

      // Registra no sistema adaptativo como sucesso
      if (app.adaptiveScoring) {
        app.adaptiveScoring.recordTradeResult(symbol, monitor.indicators || {}, true, totalRealizedPnL);
      }

      // Remove monitor e para WebSocket
      this.removeMonitor(symbol, 'STOP_MOBILE');
      app.binanceService.stopWebSocketForSymbol(symbol, '1m');
      
    } catch (error) {
      console.error(`‚ùå Erro ao tratar stop m√≥vel ${symbol}:`, error.message);
    }
  }

  /**
   * Calcula lucro total realizado de todos os alvos atingidos
   */
  calculateTotalRealizedPnL(monitor, targetsHit) {
    if (targetsHit === 0) return 0;
    
    const isLong = monitor.trend === 'BULLISH';
    let totalPnL = 0;
    
    // Percentuais de realiza√ß√£o por alvo
    const realizationPercentages = [50, 15, 10, 10, 10, 5]; // Alvo 1: 50%, Alvo 2: 15%, etc.
    
    for (let i = 0; i < targetsHit; i++) {
      const targetPrice = monitor.originalTargets[i];
      const realizationPercent = realizationPercentages[i];
      
      // Calcula PnL do alvo espec√≠fico
      const targetPnL = isLong ?
        ((targetPrice - monitor.entry) / monitor.entry) * 100 :
        ((monitor.entry - targetPrice) / monitor.entry) * 100;
      
      // Adiciona ao total baseado na porcentagem realizada
      totalPnL += (targetPnL * realizationPercent) / 100;
    }
    
    return totalPnL;
  }

  /**
   * Gera breakdown da realiza√ß√£o por alvos
   */
  getRealizationBreakdown(targetsHit) {
    const realizationPercentages = [50, 15, 10, 10, 10, 5];
    const breakdown = [];
    
    for (let i = 0; i < targetsHit; i++) {
      breakdown.push(`${realizationPercentages[i]}% no Alvo ${i + 1}`);
    }
    
    return breakdown.join(' + ');
  }

  /**
      case 6: return 'PARAB√âNS! Todos os alvos atingidos!';
      default: return 'Continue seguindo a estrat√©gia';
    }
  }

  /**
   * Calcula probabilidade para exibi√ß√£o mais realista
   */
  calculateDisplayProbability(rawProbability) {
    // Mapeamento mais agressivo para manter realismo
    
    // Probabilidades excepcionais (>98%) ‚Üí 80-85% (muito raras)
    if (rawProbability > 98) {
      const excess = rawProbability - 98;
      return 80 + (excess / 2) * 5; // 80-85%
    }
    
    // Probabilidades muito altas (95-98%) ‚Üí 75-80%
    if (rawProbability > 95) {
      const range = rawProbability - 95;
      return 75 + (range / 3) * 5; // 75-80%
    }
    
    // Probabilidades altas (90-95%) ‚Üí 70-75%
    if (rawProbability > 90) {
      const range = rawProbability - 90;
      return 70 + (range / 5) * 5; // 70-75%
    }
    
    // Probabilidades boas (85-90%) ‚Üí 65-70%
    if (rawProbability > 85) {
      const range = rawProbability - 85;
      return 65 + (range / 5) * 5; // 65-70%
    }
    
    // Probabilidades moderadas (80-85%) ‚Üí 62-67%
    if (rawProbability > 80) {
      const range = rawProbability - 80;
      return 62 + (range / 5) * 5; // 62-67%
    }
    
    // Probabilidades baixas (75-80%) ‚Üí 60-65%
    if (rawProbability > 75) {
      const range = rawProbability - 75;
      return 60 + (range / 5) * 5; // 60-65%
    }
    
    // Probabilidades muito baixas (<75%) ‚Üí 55-62%
    const adjustedScore = Math.max(45, rawProbability * 0.85); // Reduz 15%
    return Math.max(55, Math.min(62, adjustedScore));
  }
}

export default TelegramBotService;