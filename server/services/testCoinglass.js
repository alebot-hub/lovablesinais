/**
 * Arquivo de teste para verificar integra√ß√£o da API do Coinglass
 */
import dotenv from 'dotenv';
import CoinglassConfigManager from './coinglassConfigManager.js';
import CoinglassValidator from './coinglassValidator.js';
import { CoinglassAnalytics } from './coinglassAnalytics.js';
import { CoinglassHealthMonitor } from './coinglassHealthMonitor.js';

dotenv.config();

// Configura√ß√£o do servi√ßo
const configManager = new CoinglassConfigManager();
const validator = new CoinglassValidator();
const analytics = new CoinglassAnalytics();
const healthMonitor = new CoinglassHealthMonitor();

async function testCoinglassIntegration() {
  try {
    console.log('üöÄ Iniciando teste de integra√ß√£o do Coinglass...');
    
    // Verifica configura√ß√£o
    const config = configManager.getConfig();
    console.log('‚úÖ Configura√ß√£o carregada com sucesso');
    console.log(`API URL: ${config.api.baseUrl}`);
    console.log(`Timeout: ${config.api.timeout}ms`);

    // Valida s√≠mbolos
    const validSymbols = ['BTC', 'ETH'];
    for (const symbol of validSymbols) {
      const isValid = await validator.validateSymbol(symbol);
      console.log(`‚úÖ S√≠mbolo ${symbol} √© v√°lido: ${isValid}`);
    }

    // Testa an√°lise de dados
    console.log('\nüìä Iniciando an√°lise de dados...');
    const analysis = await analytics.analyzeSymbol('BTC');
    console.log('An√°lise completa:', analysis);

    // Testa monitoramento de sa√∫de
    console.log('\n‚ù§Ô∏è  Iniciando monitoramento de sa√∫de...');
    healthMonitor.start();
    console.log('Monitoramento de sa√∫de iniciado');

    console.log('\n‚úÖ Teste de integra√ß√£o conclu√≠do com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro no teste de integra√ß√£o:', error);
    process.exit(1);
  }
}

// Executa o teste
if (require.main === module) {
  testCoinglassIntegration();
}
