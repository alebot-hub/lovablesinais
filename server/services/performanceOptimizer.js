/**
 * Servi√ßo de otimiza√ß√£o de performance do sistema
 */

class PerformanceOptimizerService {
  constructor() {
    this.optimizations = new Map();
    this.performanceHistory = [];
    this.lastOptimization = null;
    this.optimizationInterval = 60 * 60 * 1000; // 1 hora
  }

  /**
   * Analisa performance e sugere otimiza√ß√µes
   */
  async analyzeAndOptimize(systemMetrics, tradingPerformance) {
    try {
      console.log('üîß Analisando performance do sistema...');
      
      const optimizations = [];
      
      // Otimiza√ß√£o de mem√≥ria
      if (systemMetrics.memoryUsage > 80) {
        optimizations.push({
          type: 'MEMORY',
          action: 'CLEAR_CACHE',
          priority: 'HIGH',
          description: 'Limpar cache para reduzir uso de mem√≥ria'
        });
      }
      
      // Otimiza√ß√£o de WebSocket
      if (systemMetrics.wsConnections > 50) {
        optimizations.push({
          type: 'WEBSOCKET',
          action: 'CLEANUP_CONNECTIONS',
          priority: 'MEDIUM',
          description: 'Limpar conex√µes WebSocket √≥rf√£s'
        });
      }
      
      // Otimiza√ß√£o de ML
      if (tradingPerformance.mlPerformance.winRate < tradingPerformance.winRate - 10) {
        optimizations.push({
          type: 'MACHINE_LEARNING',
          action: 'RETRAIN_MODELS',
          priority: 'MEDIUM',
          description: 'Retreinar modelos ML com baixa performance'
        });
      }
      
      // Otimiza√ß√£o de indicadores
      if (tradingPerformance.winRate < 60) {
        optimizations.push({
          type: 'INDICATORS',
          action: 'ADJUST_PARAMETERS',
          priority: 'HIGH',
          description: 'Ajustar par√¢metros dos indicadores t√©cnicos'
        });
      }
      
      // Aplica otimiza√ß√µes
      for (const optimization of optimizations) {
        await this.applyOptimization(optimization);
      }
      
      this.lastOptimization = new Date();
      console.log(`‚úÖ ${optimizations.length} otimiza√ß√µes aplicadas`);
      
      return optimizations;
    } catch (error) {
      console.error('‚ùå Erro na otimiza√ß√£o:', error);
      return [];
    }
  }

  /**
   * Aplica uma otimiza√ß√£o espec√≠fica
   */
  async applyOptimization(optimization) {
    try {
      switch (optimization.type) {
        case 'MEMORY':
          await this.optimizeMemory();
          break;
        case 'WEBSOCKET':
          await this.optimizeWebSockets();
          break;
        case 'MACHINE_LEARNING':
          await this.optimizeML();
          break;
        case 'INDICATORS':
          await this.optimizeIndicators();
          break;
      }
      
      console.log(`‚úÖ Otimiza√ß√£o aplicada: ${optimization.description}`);
    } catch (error) {
      console.error(`‚ùå Erro ao aplicar otimiza√ß√£o ${optimization.type}:`, error);
    }
  }

  /**
   * Otimiza uso de mem√≥ria
   */
  async optimizeMemory() {
    // For√ßa garbage collection se dispon√≠vel
    if (global.gc) {
      global.gc();
    }
    
    // Limpa caches antigos
    // Implementar limpeza espec√≠fica dos caches do sistema
  }

  /**
   * Otimiza conex√µes WebSocket
   */
  async optimizeWebSockets() {
    // Implementar limpeza de conex√µes √≥rf√£s
    // J√° existe no BinanceService.cleanupOrphanedWebSockets()
  }

  /**
   * Otimiza modelos ML
   */
  async optimizeML() {
    // Implementar retreinamento de modelos com baixa performance
  }

  /**
   * Otimiza par√¢metros dos indicadores
   */
  async optimizeIndicators() {
    // Implementar ajuste autom√°tico de par√¢metros
  }

  /**
   * Gera relat√≥rio de otimiza√ß√£o
   */
  generateOptimizationReport() {
    return {
      lastOptimization: this.lastOptimization,
      totalOptimizations: this.optimizations.size,
      performanceHistory: this.performanceHistory.slice(-10),
      recommendations: this.generateRecommendations()
    };
  }

  /**
   * Gera recomenda√ß√µes de otimiza√ß√£o
   */
  generateRecommendations() {
    const recommendations = [];
    
    // Baseado no hist√≥rico de performance
    if (this.performanceHistory.length > 5) {
      const recentPerf = this.performanceHistory.slice(-5);
      const avgWinRate = recentPerf.reduce((sum, p) => sum + p.winRate, 0) / recentPerf.length;
      
      if (avgWinRate < 60) {
        recommendations.push('Considere ajustar threshold m√≠nimo de sinais');
        recommendations.push('Revisar pesos dos indicadores t√©cnicos');
      }
    }
    
    return recommendations;
  }
}

export default PerformanceOptimizerService;